\ *********************************************************************
\ MACROS adapted from macros.inc                                      *
\    Filename:      macros.txt                                        *
\    Date:          26.03.2021                                        *
\    Updated:       29.04.2021                                        *
\    MCU:           gForth                                            *
\    Copyright:     Marc PETREMANN                                    *
\    Author:        Marc PETREMANN                                    *
\ *********************************************************************

Xassembler definitions

\ Register definitions
R2      .def upl            \ not in interrupt
R3      .def uph            \ not in interrupt
R5      .def r_zero         \ read only zero
R6      .def r_one          \ read only one
R7      .def r_two          \ read only two
R8      .def t8             \ Not in interrupt
R9      .def wflags         \ not in interrupt

R4      .def loadreg0
R12     .def loadreg1
R13     .def loadreg2


R10     .def ibasel         \ Not in interrupt
R11     .def ibaseh         \ Not in interrupt
R14     .def ms_count       \ Not in interrupt
R15     .def ms_count1      \ Not in interrupt
r16     .def t0
r17     .def t1
\   .def t2 = r0          \ Not in interrupt
\   .def t3 = r1          \ Not in interrupt

R18     .def al
R19     .def ah
R20     .def pl             \ P Register and FOR..LOOP INDEX variable
R21     .def ph

\   .def FLAGS1 = r22     \ Not in interrupt
\   .def FLAGS2 = r23     \ Not in interrupt
R24     .def tosl
R25     .def tosh
\ xl = r26
\ xh = r27
\ yl = r28  \ StackPointer Ylo
\ yh = r29  \ StackPointer Yhi
\ zl = r30
\ zh = r31
R26     .def t4
R27     .def t5
R30     .def t6
R31     .def t7

\ Macros
.macro poptos
    tosl Y+ ld,
    tosh Y+ ld,
.endmacro

.macro pushtos
    -Y tosh st,
    -Y tosl st,
.endmacro

\ .macro in_
\ .if (@1 < $40)
\   in @0,@1
\ .else
\   lds @0,@1
\ .endif
\ .endmacro

\ .macro out_
\ .if (@0 < $40)
\   out @0,@1
\ .else
\   sts @0,@1
\ .endif
\ .endmacro

\ .macro sbi_
\ .if (@0 < $40)
\   sbi @0,@1
\ .else
\   in_ r16,@0
\   ori r16,exp2(@1)
\   out_ @0,r16
\ .endif
\ .endmacro

\ .macro cbi_
\ .if (@0 < $40)
\   cbi @0,@1
\ .else
\   in_ r16,@0
\   andi r16,~(exp2(@1))
\   out_ @0,r16
\ .endif
\ .endmacro

\ .macro lpm_
\ .if (FLASHEND < 0x8000) \ Word address
\         lpm @0,@1
\ .else
\         elpm @0,@1
\ .endif
\ .endmacro


.macro sub_pflash_z
    PFLASH 0 > if
        zh PFLASH HIGH subi,
    endif
.endmacro


.macro add_pflash_z
    PFLASH 0 > if
        \ subi    zh, high(0x10000-PFLASH)
        zh $10000 PFLASH HIGH subi,    
    endif
.endmacro


.macro sub_pflash_tos
    PFLASH 0 > if
        \ subi    tosh, high(PFLASH)
        tosh PFLASH HIGH subi,   
    endif
.endmacro


.macro add_pflash_tos
    PFLASH 0 > if
        \ subi    tosh, high(0x10000-PFLASH)
        tosh $10000 PFLASH - HIGH subi,
    endif
.endmacro


.macro rampv_to_c
    FLASHEND $8000 > if
        0 bset,
    else
        0 bclr,
    endif
.endmacro

\ .macro fdw
\   .dw ((@0<<1)+PFLASH)
\ .endmacro

.macro m_pop_zh
    FLASHEND $ffff > if
        zh pop,
    endif
.endmacro

.macro m_pop_xh
    FLASHEND $ffff > if
        xh pop,
    endif
.endmacro

.macro m_pop_t0
    FLASHEND $ffff > if
        t0 pop,
    endif
.endmacro

.macro m_push_t0
    FLASHEND $ffff > if
        t0 push,
    endif
.endmacro

.macro mijmp
    FLASHEND $ffff > if
        eijmp,
    else
        ijmp,
    endif
.endmacro


\ *** End of File ***********************
s" macros.txt loaded" cr type
