\ *********************************************************************
\ FlashForth device configuration for Atmega devices                  *
\    Filename:      config.txt                                        *
\    Date:          11.03.2021                                        *
\    Updated:       02.05.2021                                        *
\    MCU:           gForth                                            *
\    Copyright:     Marc PETREMANN                                    *
\    Author:        Marc PETREMANN                                    *
\ *********************************************************************


\ Select the include file for your micro controller
\ Define a symbol for which file to include.
\ #define ffm328
\ create ffm328


\ .include "m2561def.inc"  \
[ifdef] ffm2560
    include "m2560def.inc"  \ Tested     Fuses: E:0xff H:0xdc L:0xff
[endif]

\ .include "m128def.inc"   \ Tested     Fuses: E:0xff H:0xdc L:0xff
\ .include "m168pdef.inc"
\ .include "m328pdef.inc"  \ Tested    Fuses: E:0xff H:0xda L:0xff

[ifdef] ffm328
    s" LOAD: m328def.txt" cr type
    include m328def.txt     \ Tested    Fuses: E:0xff H:0xda L:0xff
[endif]

\ .include "m644pdef.inc"

[ifdef] ffm32u4
    include "m32U4def.inc"   \ Tested Crystal Fuses: E:0xcf H:0xda L:0xff
[endif]

[ifdef] ffm16u4
    include "m16U4def.inc"  \ Not tested  Fuses : E:0xff H:0xda L:0xff
[endif]

\ Oscillator frequency in herz
#16000000    .equ FREQ_OSC

\ Define the UART used for the operator
[ifdef] defined
    0 .equ OPERATOR_UART        \ 0 or 1 (0 for 32u4 ) or 3 for USB
[endif]

[ifdef] op3
    3   .equ OPERATOR_UART
[endif]

\ UART0 configuration
\ Note: With Arduino Uno R3 and MEGA R3 the USB to serial bridge latency and queues
\ disturb the XON/XOFF flow control.
\ The workaround is to use XON/XOFF flow control and/or 1/2 ms character delay
\ in the terminal program. Or use the ff-shell.py which adds CR LF flow control.
38400   .equ BAUDRATE0          \ Serial baudrate UART0
0       .equ U0FC_TYPE          \ 0 = NONE, 1 = XON/XOFF, 2=CTS/RTS
portd   .equ U0RTS_PORT
ddrd    .equ U0RTS_DDR
3       .equ U0RTS_BIT

\ UART1 configuration
38400   .equ BAUDRATE1      \ Serial baudrate UART1
0       .equ U1FC_TYPE      \ 0 = NONE, 1 = XON/XOFF, 2=CTS/RTS
portd   .equ U1RTS_PORT
ddrd    .equ U1RTS_DDR
4       .equ U1RTS_BIT

\ Default number base
10      .equ BASE_DEFAULT   \ 16 = hexadecimal, 10 = decimal

\ Set to 1 for power save when CPU is idle
1       .equ IDLE_MODE

\ Enable the cpu load measurement. Uses Timer 1. Needs IDLE_MODE = 1
0       .equ CPU_LOAD

\ CPU load indicator led definitions. Needs IDLE_MODE = 1
1   .equ CPU_LOAD_LED               \ set to 1 to enable

[ifdef] ffm2560
    ddrb    .equ CPU_LOAD_DDR
    portb   .equ CPU_LOAD_PORT          \ avr-p28:portc arduino mega:portb uno:portb leonardo:portc
    7       .equ CPU_LOAD_BIT           \ avr-p28:5     arduino mega:7     uno:5     leonardo:7
    1       .equ CPU_LOAD_LED_POLARITY  \ avr-p28:  0 = low on port turns on led,
                                        \ arduino : 1 = high on port turns on led
[endif]

[ifdef] ffm328
    ddrb    .equ CPU_LOAD_DDR
    portb   .equ CPU_LOAD_PORT          \ avr-p28:portc arduino mega:portb uno:portb leonardo:portc
    5       .equ CPU_LOAD_BIT           \ avr-p28:5     arduino mega:7     uno:5     leonardo:7
    1       .equ CPU_LOAD_LED_POLARITY  \ avr-p28:  0 = low on port turns on led,
                                        \ arduino : 1 = high on port turns on led
[endif]

[ifdef] ffm32u4
    ddrc    .equ CPU_LOAD_DDR = ddrc
    portc   .equ CPU_LOAD_PORT = portc  \ avr-p28:portc arduino mega:portb uno:portb leonardo:portc
    7       .equ CPU_LOAD_BIT = 7       \ avr-p28:5     arduino mega:7     uno:5     leonardo:7
    1       .equ CPU_LOAD_LED_POLARITY  \ avr-p28:  0 = low on port turns on led,
                                        \ arduino : 1 = high on port turns on led
[endif]

\ Define the startup delay for the turnkey words. Milliseconds
OPERATOR_UART 3 = [if]
    6000    .equ TURNKEY_DELAY      \ milliseconds
[else]
    2000    .equ TURNKEY_DELAY      \ milliseconds
[endif]

\ UART buffer sizes
64  .equ RX0_BUF_SIZE           \ 8,16,32,64
4   .equ RX0_OFF_FILL           \ Fill level for XOFF

64  .equ RX1_BUF_SIZE           \ 8,16,32,64
4   .equ RX1_OFF_FILL           \ Fill level for XOFF

\ USER AREA sizes for the OPERATOR task
64  .equ RETURN_STACK_SIZE      \ 32 cells return stack
64  .equ PARAMETER_STACK_SIZE   \ 32 cells parameter stack
90  .equ TIB_SIZE               \ 80 chars tib size +  10 chars hold area

\ Set to 1 to allow control-o to reset FlashForth from the operator UART
0   .equ CTRL_O_WARM_RESET

\ Select which timer to use for the system millisecond ticks 0, 1, 2
0   .equ MS_TIMER

\ Debug flash and eeprom writes
\ Prints F=Write to FLASH E=Write to EEPROM
0   .equ DEBUG_FLASH

defined __ATmega2560__ [if]
    \ #define partstring "ATmega2560 "
    2       .equ UARTS
[endif]

defined __ATmega328P__ [if]
    \ #define partstring "ATmega328P "
    1       .equ UARTS
[endif]

defined __ATmega328__ [if]
    \ #define partstring "ATmega328"
    1       .equ UARTS
[endif]

defined __ATmega128__ [if]
    \ #define partstring "ATmega128"
    2       .equ UARTS
[endif]

defined __ATmega2561__ [if]
    \ #define partstring "ATmega2561 "
    2       .equ UARTS
[endif]

defined __ATmega644__ [if]
    \ #define partstring "ATmega644"
    1       .equ UARTS
[endif]

defined __ATmega32U4__ [if]
    \ #define partstring "ATmega32u4 "
    32      .equ XXU4
    1       .equ UARTS
[endif]

defined __ATmega16U4__ [if]
    \ #define partstring "ATmega16u4 "
    16      .equ XXU4
    1       .equ UARTS
[else]
    \ #define partstring "ATmega "
    1       .equ UARTS
[endif]

MS_TIMER 0 = [if]
    defined OC0Aaddr [if]
        OC0Aaddr    .equ MS_TIMER_ADDR
    [else]
        OC0addr     .equ MS_TIMER_ADDR
    [endif]
[endif]

MS_TIMER 1 = [if]
    defined OC1Aaddr [if]
        OC1Aaddr    .equ MS_TIMER_ADDR
    [else]
        OC1addr     .equ MS_TIMER_ADDR
    [endif]
[endif]

MS_TIMER 2 = [if]
    defined OC2Aaddr [if]
        OC2Aaddr    .equ MS_TIMER_ADDR
    [else]
        OC2addr     .equ MS_TIMER_ADDR
    [endif]
[endif]



\ Memory mapping prefixes
$0000   .equ PRAM               \ 8 Kbytes of ram (atm2560)
RAMEND 1+ .equ PEEPROM          \ 4 Kbytes of eeprom (atm2560)



FLASHEND $1ffff = [if]              \ 128 Kwords flash
    PEEPROM EEPROMEND + 1+ .equ OFLASH  \ 52 Kbytes available for FlashForth(atm2560)
    0 .equ PFLASH
    3 .equ RAMPZV
    $0d80 .equ KERNEL_SIZE
[then]

FLASHEND $ffff = [if]               \ 64 Kwords flash
    PEEPROM EEPROMEND + 1+ .equ OFLASH  \ 56 Kbytes available for FlashForth(atm128)
    0       .equ PFLASH
    1       .equ RAMPZV
    $0d00   .equ KERNEL_SIZE
[then]

FLASHEND $7fff = [if]               \ 32 Kwords flash
    PEEPROM EEPROMEND + 1+ .equ OFLASH \ 56 Kbytes available for FlashForth
    0 .equ PFLASH
    0 .equ RAMPZV
    $0d00 .equ KERNEL_SIZE
[then]

FLASHEND $3fff = [if]               \ 16 Kwords flash
    $8000   .equ OFLASH             \ 32 Kbytes available for FlashForth
    OFLASH  .equ PFLASH
    0       .equ RAMPZV
    $0c80   .equ KERNEL_SIZE
[then]

FLASHEND $1fff = [if]               \ 8  Kwords flash
    $C000 constant OFLASH           \ 16 Kbytes available for FlashForth
    OFLASH  .equ PFLASH
    0       .equ RAMPZV
    $0c80   .equ KERNEL_SIZE=
[then]


\ Symbol naming compatilibity
[ifdef] XXU4
    \ UART1 symbols for Atmega32u4
    UCSR1A  .equ UCSR0A
    UDR1    .equ UDR0_
    UCSR1B  .equ UCSR0B
    UCSR1C  .equ UCSR0C
    URXC1addr   .equ URXC0addr
    RXEN1   .equ RXEN0
    TXEN1   .equ TXEN0
    RXCIE1  .equ RXCIE0
    UCSZ10  .equ UCSZ00
    USBS1   .equ USBS0
    UBRR1H  .equ UBRR0H
    UBRR1L  .equ UBRR0L
    $00     .equ URSEL_
[else]
    [ifundef] UCSR0A
        \ UART0 symbols for Atmega32
        UCSRA   .equ UCSR0A
        UDR     .equ UDR0_
        UCSRB   .equ UCSR0B
        UCSRC   .equ UCSR0C
        RXEN    .equ RXEN0
        TXEN    .equ TXEN0
        RXCIE   .equ RXCIE0
        UCSZ0   .equ UCSZ00
        USBS    .equ USBS0
        UBRRH   .equ UBRR0H
        UBRRL   .equ UBRR0L
        $80 .equ URSEL_=0x80
    [else]
        UDR0    .equ UDR0_
        0       .equ URSEL_
    [endif]
[endif]

[ifundef] SPMCSR
    SPMCR   .equ SPMCSR
[endif]

[ifundef] 
    SELFPRGEN   .equ SPMEN
[endif]

[ifdef] SPMEN
    EEPE    .equ EEWE
[endif]

defined SPMEN invert [if]
    EEMPE .equ EEMWE
[endif]



OPERATOR_UART 1 = [if]
    TX1_    .equ OP_TX_
    RX1_    .equ OP_RX_
    RX1Q    .equ OP_RXQ
[else]
    OPERATOR_UART 0 = [if]
\         TX0_    .equ OP_TX_  \ @TODO: voir cr√©ation des labels
\         RX0_    .equ OP_RX_
\         RX0Q    .equ OP_RXQ
    [else]
        OPERATOR_UART 3 = [if]
            TXU_    .equ OP_TX_
            RXU_    .equ OP_RX_=
            RXUQ_   .equ OP_RXQ=
        [endif]
    [endif]
[endif]


\ #define ubrr0val (FREQ_OSC/16/BAUDRATE0) - 1
\ #define ubrr1val (FREQ_OSC/16/BAUDRATE1) - 1
FREQ_OSC $10 / BAUDRATE0 / 1 -  .equ ubrr0val
FREQ_OSC $10 / BAUDRATE0 / 1 -  .equ ubrr1val


FREQ_OSC 16384000 < [if]    \ Hz
    FREQ_OSC 1000 / 64 / 1 -    .equ ms_value_tmr0
    FREQ_OSC 1000 / 1 -         .equ ms_value_tmr1
    FREQ_OSC 1000 / 64 / 1 -    .equ ms_value_tmr2
    defined TCCR0B [if]
        3   .equ ms_pre_tmr0
    [endif]
    defined TCCR0 [if]
        4    .equ ms_pre_tmr0
    [endif]
    defined TCCR2B [if]
        4   .equ ms_pre_tmr2
    [endif]
    defined TCCR2 [if]
        3   .equ ms_pre_tmr2
    [endif]
[else]  \ FREQ_OSC >= 16384000 Hz
    FREQ_OSC 1000 / 256 / 1 -   .equ ms_value_tmr0
    FREQ_OSC 1000 / 1 -         .equ ms_value_tmr1
    FREQ_OSC 1000 / 256 / 1 -   .equ ms_value_tmr2
    defined TCCR0B [if]
        4   .equ ms_pre_tmr0
    [endif]
    \ .ifdef TCCR0 [if]
        6   .equ ms_pre_tmr0
    [endif]
    defined TCCR2B [if]
        5   .equ ms_pre_tmr2
    [endif]
    defined TCCR2 [if]
        4   .equ ms_pre_tmr2
    [endif]
[endif]




FREQ_OSC 255 * 100000 /
    .equ CPU_LOAD_VAL           \ (FREQ_OSC*255/100000)
\ ..............................................................................
\ Program Specific Constants (literals used in code)
\ ..............................................................................
\ Flash page size
PAGESIZE 2 *
    .equ PAGESIZEB              \ Page size in bytes

\ Forth word header flags
$80 .equ NFA        \ Name field mask
$40 .equ IMMED      \ Immediate mask
$20 .equ INLINE     \ Inline mask for 1 and 2 cell code
$00 .equ INLINE4    \ Inline mask for 4 cell code
$00 .equ INLINE5    \ Inline mask for 5 cell code
$10 .equ COMPILE    \ Compile only mask
$0f .equ NFAmask    \ Name field length mask

\ FLAGS2
6 .equ fIDLE        \ 0 = busy, 1 = idle
5 .equ fLOAD        \ Load measurement ready
4 .equ fLOADled     \ 0 = no load led, 1 = load led on
3 .equ fFC_tx1      \ 0=Flow Control, 1 = no Flow Control
2 .equ fFC_tx0      \ 0=Flow Control, 1 = no Flow Control
1 .equ ixoff_tx1 
0 .equ ixoff_tx0 

\ FLAGS1
\ .equ fLIT=    7     \ Literal compiled
\ .equ noclear= 6     \ dont clear optimisation flags
\ .equ idup=    5     \ Use dupzeroequal instead of zeroequal
\ .equ izeroeq= 4     \ Use brne instead of breq if zeroequal
\ .equ istream= 3
\ .equ fLOCK=   2
\ .equ fTAILC=  1
\ .equ idirty=  0

\ For Flow Control
$11 .equ XON
$13 .equ XOFF

$0d .equ CR_
$0a .equ LF_
$08 .equ BS_
$09 .equ TAB_



defined USBCON [if]
    $01c0   .equ USB_CODE
[else]
    $0000   .equ USB_CODE
[endif]

\ Memory mapping prefixes
\ .equ PRAM    = 0x0000                 \ 8 Kbytes of ram (atm2560)
\ .equ PEEPROM = RAMEND+1               \ 4 Kbytes of eeprom (atm2560)
\ .if (FLASHEND == 0x1ffff)             \ 128 Kwords flash
    \ .equ OFLASH  = PEEPROM+EEPROMEND+1    \ 52 Kbytes available for FlashForth(atm2560)
    \ .equ PFLASH  = 0
    \ .equ RAMPZV  = 3
    \ .equ EIND__ = 1
    \ .equ KERNEL_SIZE=0x0d80 + USB_CODE
\ .else
    \ .if (FLASHEND == 0xffff)              \ 64 Kwords flash
        \ .equ OFLASH  = PEEPROM+EEPROMEND+1    \ 56 Kbytes available for FlashForth(atm128)
        \ .equ PFLASH  = 0
        \ .equ RAMPZV  = 1
        \ .equ KERNEL_SIZE=0x0d00 + USB_CODE
    \ .else
        \ .if (FLASHEND == 0x7fff)              \ 32 Kwords flash
            \ .equ OFLASH = PEEPROM+EEPROMEND+1     \ 56 Kbytes available for FlashForth
            \ .equ PFLASH = 0
            \ .equ RAMPZV  = 0
            \ .equ KERNEL_SIZE=0x0d00 + USB_CODE
        \ .else
            \ .if (FLASHEND == 0x3fff)              \ 16 Kwords flash
                \ .equ OFLASH = 0x8000                  \ 32 Kbytes available for FlashForth
                \ .equ PFLASH = OFLASH
                \ .equ RAMPZV  = 0
                \ .equ KERNEL_SIZE=0x0c80 + USB_CODE
            \ .else
                \ .if (FLASHEND == 0x1fff)              \ 8  Kwords flash
                    \ .equ OFLASH = 0xC000                  \ 16 Kbytes available for FlashForth
                    \ .equ PFLASH = OFLASH
                    \ .equ RAMPZV  = 0
                    \ .equ KERNEL_SIZE=0x0c80 + USB_CODE
                \ .endif
            \ .endif
        \ .endif
    \ .endif
\ .endif
\ .equ BOOT_SIZE=0x400
\ .equ BOOT_START=FLASHEND - BOOT_SIZE + 1  \ atm128: 0xfc00, atm328: 0x3c00
\ .equ KERNEL_START=BOOT_START - KERNEL_SIZE

\ High values for memory areas
\ .equ FLASH_HI = (0xffff - (BOOT_SIZE*2) - (KERNEL_SIZE*2))& 0xFF00
\ .equ EEPROM_HI = PEEPROM + EEPROMEND
\ .equ RAM_HI = RAMEND

\ USER AREA for the OPERATOR task
RETURN_STACK_SIZE       .equ ursize      
PARAMETER_STACK_SIZE    .equ ussize   
TIB_SIZE                .equ utibsize  

\ WARM user area data
$1c  .equ warmlitsize   \ warmlitsize=28

\ User variables and area
-28 .equ us0        \ Start of parameter stack
-26 .equ ur0        \ Start of ret stack
-24 .equ uemit      \ User EMIT vector
-22 .equ ukey       \ User KEY vector
-20 .equ ukeyq      \ User KEY? vector
-18 .equ ubase      \ Number Base
-16 .equ utib       \ TIB address
-14 .equ utask      \ Task area pointer
-12 .equ ustatus
-11 .equ uflg
-10 .equ usource    \ Two cells
-6  .equ utoin      \ Input stream
-4  .equ ulink      \ Task link (up0)
-2  .equ ursave     \ Saved ret stack pointer
0   .equ uhp        \ Hold pointer


\ \\\ Variables in EEPROM
\ .equ eeprom=       PEEPROM
\ .equ dp_start=     eeprom + 0x0000 \ TURNKEY
\ .equ dp_flash=     eeprom + 0x0002 \ FLASH dictionary pointer
\ .equ dp_eeprom=    eeprom + 0x0004 \ EEPROM dictionary pointer
\ .equ dp_ram=       eeprom + 0x0006 \ RAM dictionary pointer
\ .equ latest=       eeprom + 0x0008 \ Pointer to latest dictionary word
\ .equ prompt=       eeprom + 0x000a \ Deferred prompt
\ .equ ehere=        eeprom + 0x000c

\ \****************************************************
\ .dseg
\ .ifdef USBCON
\ .org 0x110
\ .endif
\ ibuf:         .byte PAGESIZEB
\ ivec:         .byte INT_VECTORS_SIZE

\ rxqueue0:
\ rbuf0_wr:    .byte 1
\ rbuf0_rd:    .byte 1
\ rbuf0_lv:    .byte 1
\ rbuf0:       .byte RX0_BUF_SIZE

\ .if UARTS == 2
\ rxqueue1:
\ rbuf1_wr:    .byte 1
\ rbuf1_rd:    .byte 1
\ rbuf1_lv:    .byte 1
\ rbuf1:       .byte RX1_BUF_SIZE
\ .endif

\ litbuf0:    .byte 1
\ litbuf1:    .byte 1

2   .byte dpSTART
2   .byte dpFLASH           \ DP's and LATEST in RAM
2   .byte dpEEPROM
2   .byte dpRAM
2   .byte dpLATEST

\ iaddrl:     .byte 1
\ iaddrh:     .byte 1
\ .ifdef RAMPZ
    \ iaddru:	    .byte 1
    \ ibaseu:	    .byte 1
\ .endif

\ .if IDLE_MODE == 1
    \ .if CPU_LOAD == 1
        \ load_acc:   .byte 3 \ Load measurement accumulator
        \ load_res:   .byte 3 \ Load result
    \ .endif
\ .endif

1           .byte   cse     \ Current data section 0=flash, 1=eeprom, 2=ram
1           .byte   state   \ Compilation state
\ (-us0)      .byte   uvars
2           .byte   up0
ursize      .byte   urbuf        
ussize      .byte   usbuf
utibsize    .byte   utibbuf
2           .byte   dpdata




\ *** End of File ***********************
s" config.txt" cr type
