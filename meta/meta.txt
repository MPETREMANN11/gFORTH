\ *********************************************************************
\ Meta compiler for generating Xcross compiled code                   *
\    Filename:      meta.txt                                          *
\    Date:          26.03.2021                                        *
\    Updated:       06.05.2021                                        *
\    MCU:           gForth                                            *
\    Copyright:     Marc PETREMANN                                    *
\    Author:        Marc PETREMANN                                    *
\ *********************************************************************

cr ." meta.txt"


\ the TARGET vocabulary receives the headers of the words to be compiled in the target
vocabulary target

\ the TRANSITION vocabulary receives words with immediate action during meta-compilation
vocabulary transition

\ the FORWARD vocabulary receives the headers of the reference words before
vocabulary forward

vocabulary Xuser

\ the Xassembler vocabulary receives the Cross Assembler
vocabulary Xassembler

\ meta contains the meta-compiler
vocabulary meta
meta definitions


\ immediate version of only for vocabulary chaining
: [only] ( ---)
    only
; immediate

\ immediate version of forth for vocabulary chaining
: [forth] ( ---)
    forth
; immediate

\ immediate version of meta for vocabulary chaining
: [meta] ( ---)
    meta
; immediate

\ immediate version of Xassembler for vocabulary chaining
: [Xassembler] ( ---)
    Xassembler
; immediate

\ create Xswitch ( -- addr )
\     0 ,     ( Context )
\     0 ,     ( Current )
\
\ 0 value Xswitch-context ( -- Xcontext )
\ 0 value Xswitch-current ( -- Xcurrent )


: (do-switch)  ( addr -- )
\ break" switch : " cr
    dup @ context @ swap context !
    over ! cell +   \ ??    2 + or CELL + ??
    dup @ current @ swap current !
    swap !
    ;

\ keeps and restores a context
: switch  ( -- )
    context @ ,
    current @ ,
    does>
        (do-switch)
    ;

switch


\ *** new code to replace SWITCH ***************

\ keeps and restores a context
variable context-backup
variable current-backup

\ save CONTEXT and CURRENT in backups
: contextCurrentSave ( -- )
    context @   context-backup !
    current @   current-backup !
    ;

\ restore CONTEXT and CURRENT in backups
: contextCurrentRestore ( -- )
    context-backup @  context !
    current-backup @  current !
    ;

\ **********************************************






only forth also meta also
root definitions
\ all the following words are also redefined in ROOT
: meta
    meta ;

: target
    target ;

:  transition
    transition ;

: forward
    forward ;

: Xuser
    Xuser ;

: Xassembler
    Xassembler ;


only forth also meta also
meta definitions
\ the following words are defined in the META vocabulary
: in-target  ( -- )                 \ strength definition of words in TARGET
    only target definitions         \ search order limited to ROOT and TARGET
    ;


\ force definition of words in target
: in-transition  ( -- )
    only forward also               \ search order:
    target definitions              \ TRANSITION TARGET FORWARD
    also  transition
    ;

\ word definition strength in META
: in-meta  ( -- )
    only forth also                 \ search order:
    meta definitions also           \ META FORTH
    ;

\ word definition strength in Xassembler
: in-Xassembler  ( -- )
    only forth also                 \ search order:
    Xassembler definitions also     \ XASSEMBLER FORTH
    ;

\ word definition strength in FORWARDS
: in-forward  ( -- )
    forward definitions             \ order of words starting with FORWARD
    ;



\ Memory access variables in the target
variable ADR-T                      \ memorize target address; ADRment-Target
variable DP-T                       \ and Target offset;  Dict.Pointer-Target

\ convert target-addr in physical-address
: taddr-calc ( taddr -- phys-addr)
    ADR-T @ +
    ;

\ get a byte in the target
: c@-t  ( taddr -- c )
    taddr-calc c@
    ;

\ get a 16-bit word from the target
: @-t  ( taddr -- w )
    dup 1+ c@-t $100 *
    swap c@-t +
    byte-invert
    ;

\ get 32-bit value in the target - unused
\ : d@-t  ( taddr -- d )
\   **** @TODO: à écrire ****
\ ;

\ store a byte in the target
: c!-t  ( char taddr -- )
    taddr-calc c!
    ;

\ store a 16-bit word in the target
: !-t  { word taddr -- }    \ CAUTION: local variables
    word byte-invert
    $100 /mod swap
    taddr  c!-t
    taddr  1+ c!-t
    ;

\ target dictionary pointer stacks
: here-t  ( -- taddr )
    DP-T @
    ;

\ allocate n bytes in the target
: allot-t  ( n -- )
    DP-T +!
    ;

\ Logical OR on one byte in the target
: cset-t  { mask taddr -- } \ CAUTION: locals variables
    taddr c@-t
    mask or
    taddr c!-t
    ;

\ compile a byte in the target
: c,-t  ( char -- )
    here-t c!-t
    1 allot-t
    ;

\ compile a 16-bit word into the target
: ,-t  ( w -- )
    here-t !-t
    2 allot-t
    ;

\ compile a string in the target
: string,-t  ( addr len -- )
    0
    ?do
        count c,-t
    loop
    drop
    ;

2 value cell-t

\ if DP-T is odd, increment DP-T
: align ( --)
    here-t
    cell-t mod
    DP-T +!
    ;


\ Xassembler Meta Xassembler
\ : M?>MARK  ( -- f addr )
\   true here-t 0 c,-t
\ ;

\ : M?>RESOLVE  ( f addr -- )
\   here-t over 1+ - swap c!-t ?CONDITION
\ ;

\ : M?<MARK  ( -- f addr )
\   true here-t
\ ;

\ : M?<RESOLVE  ( f addr -- )
\   here-t 1+ - c,-t ?CONDITION
\ ;

\ ' HERE-T       Xassembler IS HERE
\ ' M?>MARK      Xassembler IS ?>MARK
\ ' M?>RESOLVE   Xassembler IS ?>RESOLVE
\ ' M?<MARK      Xassembler IS ?<MARK
\ ' M?<RESOLVE   Xassembler IS ?<RESOLVE

meta in-meta

\ Variables and work options for metacompiler
variable    WIDTH     15 WIDTH !    \ Headers: max name size
variable    LAST-T                  \ Latest nfa compiled
variable    CONTEXT-T               \ context metavocabulary
variable    CURRENT-T               \ current metavocabulary
variable    CHECKING                \ Compilation enslaved
variable    FORCE                   \ Forced compilation
variable    VALID     VALID on      \ Validity of current definition
variable    OLD-T                   \ Old position in target
variable    SAVING    SAVING off    \ Saving option

\ store the destination filename
string TARGET$                      \ initialization in meta_XXXXXX.XXX

\ Display of the state of a flag.
: .flag  ( adr -- )
    @ ?dup                          \ empile et teste si contenu adr non nul
    if                              \ si non nul,
        ." ON "                     \ affiche 'ON'
        dup true <>                 \ teste si <> de 'vrai' (-1)
        if                          \ si <> de -1
            ." ( " . ." )"          \ affiche valeur entre ( et )
        else                        \ sinon supprime valeur parasite
            drop
        then
    else
        ." OFF"                     \ si nul, affiche 'OFF'
    then
    ;

\ Displaying meta-compilation options
: .options ( -- )
\     break" debug .options"
    cr ." OPTIONS :"
    cr FRENCH  ?\ ."   En-têtes (longueur)             WIDTH "
       ENGLISH ?\ ."   Header (length)                 WIDTH "
       GERMAN  ?\ ."   Namen (lange)                   WIDTH "
    WIDTH    .flag
    cr FRENCH  ?\ ."   Compilation asservie         CHECKING "
       ENGLISH ?\ ."   Controlled compilation       CHECKING "
       GERMAN  ?\ ."   Kontrolierte Compilation     CHECKING "
    CHECKING .flag
    cr FRENCH  ?\ ."   Sauvegarde de la cible         SAVING "
       ENGLISH ?\ ."   Saving the target              SAVING "
       GERMAN  ?\ ."   TARGET abspeichern             SAVING "
    SAVING   .flag
    cr FRENCH  ?\ ."   Fichier de sauvegarde         TARGET$ "
       ENGLISH ?\ ."   Output file                   TARGET$ "
       GERMAN  ?\ ."   Files Name abspeichert in     TARGET$ "
    TARGET$ $@  type
    cr
    ;

\ Compiling and resolving target or forward references
: make-code  ( PFA -- )  \ @TODO: to debug....
    \ dup 2 + @
    dup cell + @
    if
        @
    else
        drop 0
    then
    ,-t
    ;

: link-backwards  ( PFA -- )
    VALID @     \ @TODO: to debug....
    if
        here-t over @ ,-t swap !
    else
        drop 0 ,-t
  then
    ;

\ test if word in FORWARD is resolved
: resolved?  ( cfa -- f )
    \   2 + @       \ @TODO: to debug....
    >body @
    ;


: forward-code  ( cfa -- )
    dup resolved?   \ @TODO: to debug....
    if      make-code
    else    link-backwards
    then
    ;

\ create a FORWARD reference
: forward:  ( -- )
    contextCurrentSave
    in-forward
    create
        contextCurrentSave
        0 , 0 ,      \ @TODO: to debug....
    does>
        forward-code
    ;

\ @TODO! xxx à débogguer
: ?missing  ( f -- )
    if
        parse-name type
              FRENCH ?\ abort" inconnu"
             ENGLISH ?\ abort" I don't understand that!"
              GERMAN ?\ abort" unbeknt"
    then
    ;

\ Search in a single vocabulary
: -find  ( <mot> -- cfa f )
    bl word                         \ isolate a word in the input stream
    find                            \ search in context voc
    ;


\ Search in TARGET vocabulary
: tickT  ( -- cfa )
    CONTEXT @
    target
    -find rot
    CONTEXT !    ;


\ : [TARGET]   ( -- )   tickT , ; immediate

\ search in forward vocabulary
: tickF  ( -- cfa f )
    CONTEXT @
    forward
    -find rot
    CONTEXT !
    ;

\ force compilation of word in FORWARD vocabulary
: [forward]  ( exec: <word> -- )
    tickF 0= ?missing
    ,   \ @TODO: ce , doit pas compiler le cfa dans gForth mais le cfa de la cible
    ; immediate

: resolve  ( taddr cfa -- )
    >body 2dup true over 2 + ! @
    begin
      dup
    while
      2dup @-t -ROT swap !-t
    repeat
    2DROP !
    ;

: ?resolves  ( -- )
    tickF
    if
        dup >body resolved? 0=
        if
            here-t swap resolve
        else
            drop
        then
    else
        drop
    then
    ;

\ Validate definitions in controlled mode
\ Check the validity of a new word
defer ?valid  ( -- )


\ Validation on "marked" words from FORTH -- @TODO: à débugger
\ : (?valid)  ( -- )
\     CHECKING @
\     if
\         >IN @ CONTEXT @
\         forth -find
\         if
\             >VIEW @ 0<>
\         else
\             drop FALSE
\         then
\         VALID !
\         CONTEXT ! >IN !
\     then
\     ;

: (?valid)  ( -- )
    true VALID !
    ;


' (?valid) is ?valid


\ move backward dictionary pointer if invalid word
: ?backstep  ( -- )
    VALID @
    if      here-t OLD-T !  \ dictionary pointer target in OLD-T
    else    OLD-T @ DP-T !  \ brings back target dictionary pointer
    then
    ;

\ returns target dictionary pointer if word is valid
: ?here-t  ( -- taddr )
    VALID @
    if      here-t
    else    0
    then
    ;


\ Directive for mandatory compilation
: forced  ( -- )
    ?backstep CHECKING @ FORCE !
    CHECKING off VALID ON
    ;

\ Compulsory end of compilation
: unforced  ( -- )
    FORCE @  CHECKING !
    ;




\ Création des en-têtes dans la cible
\ : HASH  ( str-addr voc-addr -- thread )
\   swap 1+ c@ #THREADS 1- AND 2* +
\ ;


\ *** compilation of complete header word ***************************
defer compile-header



\ compile header into target --- @TODO : à adapter aux en-têtes FlashForth
: header-t  ( -- )
    bl word
    dup
    c@ WIDTH @ MIN \ dup
    VALID @ AND
    if
        align
        compile-header      \ compilation of complete word header
    else
        drop
    then
    ;


\ Creation in target and target reference with FORWARD auto-resolution
: target-create  ( -- )
    ?backstep
    ?valid
\ break" target-create : "
    >IN @ dup header-t
    >IN !
    in-target       \ create word in target vocabulary
    create
        in-meta
        here-t , VALID @ ,
        >IN ! ?resolves
    does>
        make-code
    ;

\ in-xassembler
\ meta also


\ Coded labels without header in target
: label  ( -- )
    \ @TODO: à surveiller, semble fonctionner
    forced
    >IN @ Xassembler definitions
    here-t constant                 \ create label in Xassembler vocabulary
    >IN ! ?resolves unforced
    ;

\ definition of word in binary in target
: code  ( comp: -- <name> | exec: --)
\ break" code : "
    \ @TODO: to debug
    target-create
    Xassembler also
\     !csp
    ;

Xassembler also definitions


\ end of binary in target
: end-code
    in-meta
\     ?csp    \ teste si pile modifiée
    ;

\ alias for end-code
: c;
    end-code
    ;

meta in-meta


\ affiche nom d'une référence target à partir de son cfa cible
\ variable CFA-REF
\ : .REF ( cfa --- )
\   CFA-REF !
\   target CONTEXT @ HERE #THREADS 2* CMOVE
\   begin
\     HERE #THREADS LARGEST dup
\   while
\     dup NAME> >body 2 + @  CFA-REF @ =
\     if
\       .ID
\ \     else
\ \      drop
\     then
\     @ swap ! STOP?
\     if
\       EXIT
\     then
\   repeat
\   2DROP in-meta ;

: recreate  ( -- )
    >IN @ target-create >IN !
    ;





meta in-meta

\ Compilation des mots de transition

\ original code
\ : T:  (S -- )
\   SWITCH TRANSITION DEFINITIONS
\   CREATE
\     SWITCH ]
\   DOES>
\     >R
\ ;

\ Compiling Transition Words
\ : T:  ( -- )
\     contextCurrentSave
\     transition definitions
\     create
\         contextCurrentRestore ]
\     does>
\         >r
\     ;

\ Compiling Transition Words
: T:  ( -- <name> )
    contextCurrentSave
    transition definitions
    :
    contextCurrentRestore
    ;

\ original code
\ : T;  (S -- )
\   SWITCH TRANSITION DEFINITIONS
\   [COMPILE] ; SWITCH
\ ; IMMEDIATE


: T;  ( -- )
\ break" T; : " cr
    contextCurrentSave
    [forth]
    [compile] ;           
    contextCurrentRestore
    ; immediate


\ : DIGIT?  ( CHAR -- F )
\   BASE @ DIGIT NIP
\ ;

\ : PUNCT?  ( CHAR -- F )
\   ASCII . over = SWAP
\   ASCII - over = SWAP
\   ASCII / over = SWAP
\   drop OR OR
\ ;

\ : NUMERIC?  ( ADDR LEN -- F )
\   dup 1 =
\   if
\     drop c@ DIGIT? EXIT
\   then
\   1 -ROT 0
\   ?do
\     dup c@ dup DIGIT? swap PUNCT? OR
\     rot AND swap 1+
\   loop
\   drop
\ ;

\ Transition words
T: (
    [compile] (
     T;



T: \
    [compile] \
    T;

T: ?\
    postpone ?\
    T;

T: FRENCH
    [compile] FRENCH
    T;

T: ENGLISH
    [compile] ENGLISH
    T;

T: GERMAN
    [compile] GERMAN
    T;


: ]]
    ]
    ;

: [[
\     [compile] [
    postpone [
    ; forth immediate meta



\ \ T: EOF
\ \    [compile] EOF
\ \ T;

\ forward: definitions
\ forward: [

\ : STRING,-T  ( -- )
\   ASCII " PARSE dup c,-t string,-t ALIGN
\ ;

\ forward: (.")

\ T: ."
\    [forward] (.") STRING,-T
\ T;

\ forward: (")

\ T: "
\    [forward] (") STRING,-T
\ T;

\ forward: (abort")

\ T: abort"
\  [forward] (abort") STRING,-T
\ T;

\ forward: (LIT)

\ T: LITERAL  ( n -- )
\    [forward] (LIT) ,-t
\ T;

\ T: DLITERAL  ( d -- )
\    [forward] (LIT) ,-t
\    [forward] (LIT) ,-t
\ T;

\ T: ASCII  ( -- )
\    [compile] ASCII [[  transition ]] LITERAL [META]
\ T;

\ \ Mots de définition
\ forward: DOCREATE

\ : create
\     recreate
\     [forward]
\ DOCREATE
\ ?here-t
\ CONSTANT
\  ;

\ : variable  ( -- )
\     create
\         0 ,-t
\     ;

\ : 2variable  ( -- )
\   create
\     0 ,-t 0 ,-t
\ ;

\ forward: DODEFER

\ : DEFER  ( -- )
\   target-create [forward] DODEFER 0 ,-t
\ ;

\ forward: DOCONSTANT
\
\ : CONSTANT  ( n -- )
\   recreate [forward] DOCONSTANT dup ,-t CONSTANT
\ ;

\ forward: DO2CONSTANT

\ : 2CONSTANT  ( d -- )
\   recreate [forward] DO2CONSTANT
\   over over ,-t ,-t 2CONSTANT
\ ;

\ forward: DOSTRING

\ : STRING  ( n --)
\   recreate [forward] DOSTRING
\   dup c,-t 0 c,-t dup allot-t STRING
\ ;

\ forth
\ variable #USER-T
\ meta also Xuser definitions

\ : allot  ( n -- )
\     #USER-T +!
\     ;

\ forward: DOUSER-VARIABLE

\ : variable  ( -- )
\   switch recreate [forward] DOUSER-VARIABLE #USER-T @
\   dup ,-t 2 ALLOT meta definitions
\   [FORTH] CONSTANT [META] switch
\ ;

\ forward: DOUSER-DEFER
\
\ : DEFER  ( -- )
\   switch recreate [forward] DOUSER-DEFER #USER-T @
\   dup ,-t 2 ALLOT meta definitions
\   [FORTH] CONSTANT [META] switch
\ ;

meta in-meta

\ Transition words and vocabularies
\ forth variable VOC-LINK-T meta

\ forward: <vocabulary>

\ : vocabulary  ( -- )
\   recreate [forward] <vocabulary> here-t #THREADS 0
\   DO
\     0 ,-t
\   loop
\   here-t VOC-LINK-T @ ,-t VOC-LINK-T !
\   [FORTH] CONSTANT
\   does>
\     @ [META] CONTEXT-T !
\ ;

\ forward: (;USES)

\ forth variable STATE-T meta

\ T: ;USES  ( -- )
\    [forward] (;USES) IN-meta Xassembler
\    !csp STATE-T off
\ T;

\ T: [compile]
\    tickT EXECUTE
\ T;

\ forward: (IS)

\ T: IS
\    [forward] (IS)
\ T;

\ : IS
\   tickT >body dup 2+ @
\   if
\     @ >body !-t
\    else
\     2DROP
\   then
\ ;

\ T: ALIGN
\ T;

\ T: EVEN
\ T;

\ forward: (;CODE)
\ forward: DODOES

\ T: does>  ( <forward-type> -- )
\    [forward] (;CODE) ?resolves ( DOES-OP ) 232 c,-t
\    [forward] DODOES here-t dup 2- @-t over - swap 2- !-t
\ T;

\ : NUMERIC  ( -- )
\   [FORTH] HERE [META] NUMBER DPL @ 1+
\   if
\     [[  transition ]] DLITERAL [META]
\    else
\     drop [[  transition ]] LITERAL [META]
\   then
\ ;

\ : UNDEFINED  ( -- )
\   here-t 0 ,-t in-forward [FORTH]
\   create
\     [META]  transition [FORTH] , FALSE , [META]
\   does>
\     forward-code
\ ;

\ *** list of forward references used in core.txt ******************************




\ *** END of list forward in core.txt ******************************



\ Boucle de compilation méta-générateur
\ [FORTH] variable T-IN meta

\ : ]  ( -- )
\     STATE-T ON in-transition
\     begin
\         >IN @ T-IN ! defined
\         if
\             EXECUTE
\          else
\             count NUMERIC?
\             if
\                 NUMERIC
\              else
\                 VALID @
\                 if
\                     T-IN @ >IN ! UNDEFINED
\                 then
\             then
\         then
\         STATE-T @ 0= END? @ OR END? off
\     UNTIL
\     ;

\ : NEWSTATE
\   STATE-T @
\   if
\     ]
\   then
\   STATE
\ ;

\ [FORTH] ' NEWSTATE IS RUN meta

\ T: [  ( -- )
\    in-meta STATE-T off
\ T;

forward: UNNEST

\ T: ;  ( -- )
\    [forward] UNNEST [[  transition ]] [
\ T;

forward: NEST

\ \ Structures de contrôle de META
\ : ?>MARK  ( -- f addr )
\   true here-t 0 ,-t
\ ;

\ : ?>RESOLVE  ( f addr -- )
\   here-t swap !-t ?CONDITION
\ ;

\ : ?<MARK  ( -- f addr )
\   true here-t
\ ;

\ : ?<RESOLVE  ( f addr -- )
\   ,-t ?CONDITION
\ ;

\ forward: BRANCH
\ forward: ?BRANCH

\ T: begin
\    ?<MARK
\ T;

\ T: AGAIN
\    [forward] BRANCH ?<RESOLVE
\ T;

\ T: UNTIL
\    [forward] ?BRANCH ?<RESOLVE
\ T;

\ T: if
\    [forward] ?BRANCH ?>MARK
\ T;

\ T: then
\    ?>RESOLVE
\ T;

\ T:  else
\    [forward] BRANCH ?>MARK 2SWAP ?>RESOLVE
\ T;

\ T: while
\    [[  transition ]] if
\ T;

\ T: repeat
\    2SWAP [[  transition ]] AGAIN then
\ T;

\ forward: (?do)
\ forward: (DO)
\ forward: (loop)
\ forward: (+loop)
\ forward: (LEAVE)
\ forward: (?LEAVE)

\ T: ?do
\    [forward] (?do) ?>MARK
\ T;

\ T: DO
\    [forward] (DO) ?>MARK
\ T;

\ T: loop
\    [forward] (loop) 2dup 2+ ?<RESOLVE ?>RESOLVE
\ T;

\ T: +loop
\    [forward] (+loop) 2dup 2+ ?<RESOLVE ?>RESOLVE
\ T;

\ T: LEAVE
\    [forward] (LEAVE)
\ T;

\ T: ?LEAVE
\    [forward] (?LEAVE)
\ T;

\ forward: over
\ forward: drop
\ forward: =

\ T: CASE
\    CSP @ !csp
\ T;

\ T: OF
\    [forward] over [forward] =
\    [forward] ?BRANCH ?>MARK
\    [forward] drop
\ T;

\ T: ENDOF
\    [[  transition ]]  else
\ T;

\ T: ENDCASE
\    [forward] drop
\    [FORTH] begin
\              SP@ CSP @ <>
\            while
\              [META] ?>RESOLVE
\    [FORTH] repeat
\    CSP ! [META]
\ T;


in-meta

\ Final metacompilation and backup report
\ List of validated TARGET symbols
\ : .symbols    ( -- )
\     \ RMARGIN @  >r
\     \ 53 RMARGIN !  \ sauvegarde et modif. de RMARGIN
\     cr
\     FRENCH  ?\ ." Liste des mots de la cible :"
\     ENGLISH ?\ ." Target words list :"
\     GERMAN  ?\ ." TARGET Namenliste :"
\     cr  TARGET CONTEXT @ HERE #THREADS 2* CMOVE
\     begin
\         HERE #THREADS  LARGEST   dup
\     while
\         dup L>NAME  dup c@  31 AND #OUT @ + RMARGIN @ >
\         if
\             cr LMARGIN @ SPACES
\         then
\         dup NAME> >body
\         dup @  BASE @ >r  HEX 0 <# # # # # #> type SPACE R> BASE !
\         2+ @
\         if
\             .ID 26 ?TAB
\         else
\             drop
\         then
\         @ swap !   STOP?
\         if
\             R> RMARGIN !
\             EXIT
\         then
\     repeat 2DROP in-meta
\     R> RMARGIN !        \ restaure valeur initiale de RMARGIN
\     ;

\ : .unresolved  ( -- )
\   FORWARD CONTEXT @ HERE #THREADS 2* CMOVE
\   begin
\     HERE #THREADS LARGEST dup
\   while
\     ?CR dup L>NAME NAME> >body resolved? 0=
\     if
\       dup L>NAME .ID
\     then
\     @ swap ! STOP?
\     if
\       2DROP in-meta EXIT
\     then
\   repeat
\   2DROP in-meta
\ ;

: statistics ( --)
\   cr  FRENCH  ?\ ." REFERENCES NON RESOLUES:"
\       ENGLISH ?\ ." UNRESOLVED REFERENCES:"
\       GERMAN  ?\ ." UNGEKLÄRTE WORTE:"
\  cr .unresolved cr
    cr  FRENCH  ?\ ."   STATISTIQUES: "
        ENGLISH ?\ ."   SYSTEM EVALUATION: "
        GERMAN  ?\ ."   Sys-STAT: "
    cr  FRENCH  ?\ ." Adresse cible:            "
        ENGLISH ?\ ." Target address:           "
        GERMAN  ?\ ." TARGET Speicher Adresse:  "
        ADR-T @ u.
    cr  FRENCH  ?\ ." Première adresse cible:   "
        ENGLISH ?\ ." Fist target adress:       "
        GERMAN  ?\ ." Erste TARGET Adresse:     "
        in-meta 0  u.
    cr  FRENCH  ?\ ." Dernière adresse cible:   "
        ENGLISH ?\ ." Latest target adress:     "
        GERMAN  ?\ ." Letzte TARGET Adresse:    "
        here-t u.
    cr cr
    ;

\ : tsave ( -- )
\   cr FRENCH  ?\ ." Sauvegarde de la cible dans "
\      ENGLISH ?\ ." Saving the target in "
\      GERMAN  ?\ ." TARGET abspeichert in "
\   TARGET$ type
\   FRENCH  ?\ ." , taille = "
\   ENGLISH ?\ ." , size = "
\   GERMAN  ?\ ." , größe = "
\   here-t 256 - u. ATTOFF cr
\   " LSAVE " TARGET$ 0 INSERT$
\   ADR-T @ 0 here-t TARGET$ $EXECUTE
\ ;

\ end of meta-compilation
: end-meta  ( -- )
    statistics SAVING @
    if
        \ tsave
    then
    [forth] only forth also definitions decimal
    ;


\ Final words of interpretation for META
: H:
    [compile] :
    ;

: H;
    [compile] ;
    ; immediate

\ H: '
\    tickT >body @
\ H;

H: ,
    ,-t
    H;

H: c,
    c,-t
    H;

H: here
    here-t
    H;

H: allot
    allot-t
    H;

\ H: definitions
\    definitions CONTEXT-T @ CURRENT-T !
\ H;

\ H: immediate  ( -- )
\    WIDTH @
\    if                             ( Headers ? )
\      64                           ( Precedence Bit )
\      LAST-T @ cset-t
\    then
\ H;


include compile-header-resolve.txt




\ create head word in target
 \ force compilation of word in FORWARD vocabulary

: (in:)
\ break:
    target-create               
    [forward] NEST ]
    ;

H: :  ( -- )
    (in:)
    H;


forth
only
forth also
forth definitions



\ *** End of File ***********************

