\ ***********************************************************************
\ ESP32 Disassembler                                                    *
\    Filename:      Disassembler.txt                                    *
\    Date:          28.05.2021                                          *
\    MCU:           ESP32 -- gForth                                     *
\    Copyright:     Marc PETREMANN                                      *
\    Author:        Marc PETREMANN                                      *
\    Updated:       03.06.2021                                          *
\ ***********************************************************************

\ assembly instructions for ESP32 are taken from this document:
\ https://github.com/MPETREMANN11/gFORTH/blob/master/meta/esp32/xtensa.pdf

vocabulary ESP32disassembler
ESP32disassembler definitions
only forth also
ESP32disassembler also
forth

\ Instructions format: ( pages 593... Xtensa.pdf )
\ RSR
\ RRI4
\ CALLX
\ RRRN
\ RI16
\ RI7...


\ Registers
\ AR    address registers
\ PC    program counter
\       special registers (p 233 Xtensa.pdf)
\           0   LBEG
\           1
\           2
\           3
\           4
\           5
\           12
\           15
\           16
\           17

\ The ESP32 has 16 registers (actually more once you get involved with the register window 
\ business, but never mind that for now. They are designated a0 through a15.
\ Two of them are special. a0 is used for subroutine return addresses. a1 is the stack pointer. 
\ You can use these as general registers as long as you understand what you are doing. 


\ Use the RUR.* and WUR.* instructions to access the user registers.
\       user registers (p261 Xtensa pdf)
\           0..223
\           231     THREADPTR
\           232     FCR
\           233     FSR



\ souyrce: http://cholla.mmto.org/esp32/bootrom/disasm.html
\ Instructions are either 16 or 24 bits in size, but you rarely care about that. This is a RISC 
\ machine with a load/store architecture. Data flow in the assembler syntax used is right to left, 
\ with some exceptions (notably the s32i instruction). Think of it like an assignment statement in C. 
\ Here are some examples:
\     movi    a0, 0		; a0 = 0
\     and	    a3, a3, a2		; a3 = a3 & a2
\     sub     a13, a13, a14	; a13 -= a14
\     l32i.n  a3, a2, 0		; a3 = *a2
\     s32i.n  a3, a2, 0		; *a2 = a3
\     addi    a8, a4, -1		; a8 = a4 - 1

\ The l32r instruction fetches a 32 bit constant that is stored (dumped) someplace 
\ nearby (hence the actual address where the constant is dumped is of little real 
\ interest).
\ l32r    a3, [0x0000abab]	; a3 = 0x0000abab


\ **** My firsts ESP32 dissambling words ************************************

: @mask  ( addr --- mask )
    cell+ @
    ;



\ +------------------------------------------------------------------------+
\ Instructions format: ( pages 595... Xtensa.pdf )

\ CALL        23                                   5  3     0
\             +-------+-------+-------+-------+---+---+-------+
\ Little End. |              offset               | n |  op0  |
\             +-------+-------+-------+-------+---+---+-------+


: >CALL  { n op0 }
    #3 ,                    \ compile length
    op0
    n    4 lshift  or  ,
    ;

: CALL: ( comp: n op0 -- | exec: -- mask )
    create
        >CALL
        s" CALL" swap , ,
    does>
        @mask
    ;

\ Example:
\              n   op0
\             %00 %0000  CALL: CALL0


\ +------------------------------------------------------------------------+
\ Instructions format: ( pages 595... Xtensa.pdf )

\ CALLX       23       19      15      11      7   5  3     0
\             +-------+-------+-------+-------+---+---+-------+
\ Little End. |  op2  |  op1  |   r   |   s   | m | n |  op0  |
\             +-------+-------+-------+-------+---+---+-------+


: >CALLX  { op2 op1 ar as m n op0 }
\ break" >callx : "
    #3 ,                    \ compile length
    op0
    n    4 lshift  or
    m    6 lshift  or
    as   8 lshift  or
    ar  12 lshift  or
    op1 16 lshift  or
    op2 20 lshift  or  ,
    ;

: CALLX: ( comp: op2 op1 ar as m n length -- | exec: -- mask )
    create
        >CALLX
        s" CALLX" swap , ,
    does>
        @mask
    ;

\ Example:
\  op2   op1     r     s   m   n   op0
\ %0000 %0000 %0000 %0000 %11 %00 %0000  CALLX: CALLX0


\ +------------------------------------------------------------------------+
\ Instructions format: ( pages 594... Xtensa.pdf )

\ RRI8        23              15      11       7       3     0
\             +-------+-------+-------+-------+-------+-------+
\ Little End. |     imm8      |   r   |   s   |   t   |  op0  |
\             +-------+-------+-------+-------+-------+-------+

: >RRI8 { r s t op0 -- mask }
    #3 ,                    \ compile length
    op0
    t    4 lshift  or
    s    8 lshift  or
    r   12 lshift  or  ,
   ;

: RRI8: ( comp: op0 op1 length -- | exec: -- )
    create
        >RRI8
        s" RRI8" swap , ,
    does>
        @mask
    ;

\ Example
\ %0111 %0000 %0010 %0010  RRI8: DPFRO ," Data Cache Prefetch for Read Once"



\ +------------------------------------------------------------------------+
\ Instructions format: ( pages 593... Xtensa.pdf )

\ RRR         23      19      15      11       7       3     0
\             +-------+-------+-------+-------+-------+-------+
\ Little End. |  op2  |  op1  |   r   |   s   |   t   |  op0  |
\             +-------+-------+-------+-------+-------+-------+

\ transform op0 op1 and op2 in a 24 bits mask
: >RRR  { op2 op1 ar as at op0 }
    #3 ,                    \ compile length
    op0
    at   4 lshift  or
    as   8 lshift  or
    ar  12 lshift  or
    op1 16 lshift  or
    op2 20 lshift  or  ,
    ;

\ length in byte of instruction
: RRR: ( comp: op2 op1 ar  as  at op0 -- | exec: -- mask )
    create
        >RRR
        s" RRR" swap , ,
    does>
        @mask
    ;




\ Example:
\  op2   op1    r     s     t    op0
\ %0110 %0000 %0000 %0001 %0000 %0000  RRR: ABS



\ +------------------------------------------------------------------------+
\ Instructions format: ( pages 596... Xtensa.pdf )

\ RRRN        15      11       7       3     0
\             +-------+-------+-------+-------+
\ Little End. |   r   |   s   |   t   |  op0  |
\             +-------+-------+-------+-------+

: >RRRN { r s t op0 -- mask }
    #2 ,                    \ compile length
    op0
    t   4 lshift  or
    s   8 lshift  or
    r  12 lshift  or  ,
    ;

: RRRN: ( comp: op0 length -- | exec: -- )
    create
        >RRRN
        s" RRRN" swap , ,
    does>
        @mask
    ;

\ Example:
\   r     s     t    op0
\ %0000 %0000 %0000 %1010  RRRN: ADD.N                 \ Narrow Add


\ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

: ," 
    [char] " parse 
    dup c,
    0 do
        count c,
    loop
    drop
    ;


%0110 %0000 %0000 %0001 %0000 %0000  RRR: ABS           ," Absolute Value"
%1111 %1010 %0000 %0000 %0001 %0000  RRR: ABS.S         ," Absolute Value Single"
%1000 %0000 %0000 %0000 %0000 %0000  RRR: ADD           ," Add"
%0000 %0000 %0000 %1010  RRRN: ADD.N                    ," Narrow Add"
%0000 %1010 %0000 %0000 %0000 %0000  RRR: ADD.S         ," Add Single"
%1100 %0000 %0000 %0010  RRI8: ADDI                     ," Add Immediate"
%0000 %0000 %0000 %1011  RRRN: ADDI.N                   ," Narrow Add Immediate"
%1101 %0000 %0000 %0010  RRI8: ADDMI                    ," Add Immediate with Shift by 8"
%1001 %0000 %0000 %0000 %0000 %0000  RRR: ADDX2         ," Add with Shift by 1"
%1010 %0000 %0000 %0000 %0000 %0000  RRR: ADDX4         ," Add with Shift by 2"
%1011 %0000 %0000 %0000 %0000 %0000  RRR: ADDX8         ," Add with Shift by 3"
%0000 %0000 %1001 %0000 %0000 %0000  RRR: ALL4          ," All 4 Booleans True"
%0000 %0000 %1011 %0000 %0000 %0000  RRR: ALL8          ," All 8 Booleans True"
%0001 %0000 %0000 %0000 %0000 %0000  RRR: AND           ," Bitwise Logical And"
%0000 %0010 %0000 %0000 %0000 %0000  RRR: ANDB          ," Boolean And"
%0001 %0010 %0000 %0000 %0000 %0000  RRR: ANDBC         ," Boolean And with Complement"
%0000 %0000 %1000 %0000 %0000 %0000  RRR: ANY4          ," Any 4 Booleans True"
%0000 %0000 %1010 %0000 %0000 %0000  RRR: ANY8          ," Any 8 Booleans True"
%0100 %0000 %0000 %0111  RRI8: BALL                     ," Branch if All Bits Set"
%1000 %0000 %0000 %0111  RRI8: BANY                     ," Branch if Any Bit Set"
%0101 %0000 %0000 %0111  RRI8: BBC                      ," Branch if Bit Clear"
%0111 %0000 %0000 %0111  RRI8: BBCI                     ," Branch if Bit Clear Immediate" \ @TODO voir cas bbi4
%0111 %0000 %0000 %0111  RRI8: BBCI.L                   ," Branch if Bit Clear Immediate LE"
%1101 %0000 %0000 %0111  RRI8: BBS                      ," Branch if Bit Set"
%1111 %0000 %0000 %0111  RRI8: BBSI                     ," Branch if Bit Set Immediate"
%1111 %0000 %0000 %0111  RRI8: BBSI.L                   ," Branch if Bit Set Immediate LE"
%0001 %0000 %0000 %0111  RRI8: BEQ                      ," Branch if Equal"
%0000 %0000 %0010 %0110  RRI8: BEQI                     ," Branch if Equal Immediate"
\ BEQZ      ," "
\ BEQZ.N    ," "
%0000 %0000 %0111 %0110  RRI8: BF                       ," Branch if False"
%1010 %0000 %0000 %0111  RRI8: BGE                      ," Branch if Greater Than or Equal"
\ BGEI      ," "
%1011 %0000 %0000 %0111  RRI8: BGEU                     ," Branch if Greater Than or Equal Unsigned"
\ BGEUI     ," "
\ BGEZ      ," "
%0010 %0000 %0000 %0111  RRI8: BLT                      ," Branch if Less Than"
\ BLTI      ," "
%0011 %0000 %0000 %0111  RRI8: BLTU                     ," Branch if Less Than Unsigned"
\ BLTUI     ," "
\ BLTZ      ," "
%1100 %0000 %0000 %0111  RRI8: BNALL                    ," Branch if Not-All Bits Set"
%1001 %0000 %0000 %0111  RRI8: BNE                      ," Branch if Not Equal"
\ BNEI      ," "
\ BNEZ      ," "
%0000 %0000 %0000 %0111  RRI8: BNONE                    ," Branch if No Bit Set"
%0000 %0000 %0100 %0000 %0000 %0000  RRR: BREAK         ," Breakpoint %0100 b12..b15"
%0001 %0000 %0111 %0110  RRI8: BT                       ," Branch if True"
%00 %0101  CALL: CALL0                                  ," Non-windowed Call"
%01 %0101  CALL: CALL4                                  ," Call PC-relative, Rotate Window by 4"
%10 %0101  CALL: CALL8                                  ," Call PC-relative, Rotate Window by 8"
%11 %0101  CALL: CALL12                                 ," Call PC-relative, Rotate Window by 12"
%0000 %0000 %0000 %0000 %11 %00 %0000  CALLX: CALLX0    ," Non-windowed Call Register"
%0000 %0000 %0000 %0000 %11 %01 %0000  CALLX: CALLX4    ," Call Register, Rotate Window by 4"
%0000 %0000 %0000 %0000 %11 %10 %0000  CALLX: CALLX8    ," Call Register, Rotate Window by 8"
%0000 %0000 %0000 %0000 %11 %11 %0000  CALLX: CALLX12   ," Call Register, Rotate Window by 12"
%1011 %1010 %0000 %0000 %0000 %0000  RRR: CEIL.S        ," Ceiling Single to Fixed"
%0011 %0011 %0000 %0000 %0000 %0000  RRR: CLAMPS        ," Signed Clamp"
%0111 %0000 %0110 %0010  RRI8: DHI                      ," Data Cache Hit Invalidate"
\ DHU       ," Data Cache Hit Unlock"
\ DHWB      ," Data Cache Hit Writeback"
\ DHWBI     ," Data Cache Hit Writeback Invalidate"
\ DII       ," Data Cache Index Invalidate"
\ DIU       ," Data Cache Index Unlock"
\ DIWB      ," Data Cache Index Write Back"
\ DIWBI     ," Data Cache Index Write Back Invalidate"
\ DPFL      ," Data Cache Prefetch and Lock"
\ DPFR      ," Data Cache Prefetch for Read"
%0111 %0000 %0010 %0010  RRI8: DPFRO                    ," Data Cache Prefetch for Read Once"
\ DPFT      ," Data Cache Prefetch for Read"
\ DPFW      ," Data Cache Prefetch for Write"
\ DPFWO     ," Data Cache Prefetch for Write Once"
%0000 %0000 %0010 %0000 %0011 %0000  RRR: DSYNC         ," Load/Store Synchronize"
\ ENTRY     ," Subroutine Entry"
%0000 %0000 %0000 %0010 %0000 %0000  RRR: ESYNC         ," Execute Synchronize"
%0000 %0000 %0010 %0010 %1000 %0000  RRR: EXCW          ," Exception Wait"
\ EXTUI     ," Extract Unsigned Immediate"
%0000 %0000 %0010 %0000 %1101 %0000  RRR: EXTW          ," External Wait"
%1100 %1010 %0010 %0000 %0000 %0000  RRR: FLOAT.S       ," Convert Fixed to Single"
%1010 %1010 %0010 %0000 %0000 %0000  RRR: FLOOR.S       ," Floor Single to Fixed"
%0101 %0000 %1100 %0000 %0000 %0000  RRR: IDTLB         ," Invalidate Data TLB Entry"
\ IHI       ," Instruction Cache Hit Invalidate"
\ IHU       ," Instruction Cache Hit Unlock"
\ III       ," Instruction Cache Index Invalidate"
%0101 %0000 %0100 %0000 %0000 %0000  RRR: IITLB         ," Invalidate Instruction TLB Entry"
\ IIU       ," "
%0000 %0000 %0000 %0000 %00 %00 %0000  CALLX: ILL       ," Illegal Instruction"
%1111 %0000 %0110 %1101  RRRN: ILL.N                    ," Narrow Illegal Instruction"
\ IPF       ," "
\ IPFL      ," "
%0000 %0000 %0001 %0000 %0000 %0000  RRR: ISYNC         ," Instruction Fetch Synchronize"
%00 %0110  CALL: J                                      ," Unconditional Jump"
\ J.L   is an assembler macro which generates exactly a J instruction
%0000 %0000 %0000 %0000 %10 %10 %0000  CALLX: JX        ," Unconditional Jump Register"
\ L8UI  ," "
\ L16SI  ," "
\ L16UI  ," "
\ L32AI  ," "
\ L32E  ," "
\ L32I  ," "
\ L32I.N  ," "
\ L32R  ," "
%1111 %0001 %1000 %0000 %0000 %0000  RRR: LDCT          ," Load Data Cache Tag"
%1001 %0000 %1000 %0000 %0000 %0100  RRR: LDDEC         ," Load with Autodecrement"
%1000 %0000 %0000 %0000 %0000 %0100  RRR: LDINC         ," Load with Autoincrement"
%1111 %0001 %0000 %0000 %0000 %0000  RRR: LICT          ," Load Instruction Cache Tag"
%1111 %0001 %0010 %0000 %0000 %0000  RRR: LICW          ," Load Instruction Cache Word"
\ LOOP  ," Loop"
\ LOOPGTZ  ," Loop if Greater Than Zero"
\ LOOPNEZ  ," Loop if Not-Equal Zero"
\ LSI  ," Load Single Immediate"
\ LSIU  ," Load Single Immediate with Update"
%0000 %1000 %0000 %0000 %0000 %0000  RRR: LSX           ," Load Single Indexed"
%0001 %1000 %0000 %0000 %0000 %0000  RRR: LSXU          ," Load Single Indexed with Update"
%0100 %1010 %0000 %0000 %0000 %0000  RRR: MADD.S        ," Multiply and Add Single"
%0101 %0011 %0000 %0000 %0000 %0000  RRR: MAX           ," Maximum Value"
%0111 %0011 %0000 %0000 %0000 %0000  RRR: MAXU          ," Maximum Value Unsigned"
%0000 %0000 %0010 %0000 %1100 %0000  RRR: MEMW          ," Memory Wait"
%0100 %0011 %0000 %0000 %0000 %0000  RRR: MIN           ," Minimum Value"
%0110 %0011 %0000 %0000 %0000 %0000  RRR: MINU          ," Minimum Value Unsigned"
%0010 %0000 %0000 %0000 %0000 %0000  RRR: MOV           ," Move"
%0000 %0000 %0000 %1101  RRRN: MOV.N                    ," Narrow Move"
%1111 %1010 %0000 %0000 %0000 %0000  RRR: MOV.S         ," Move Single"
\ MOVEQZ    ," "
\ MOVEQZ.S    ," "
\ MOVF    ," "
\ MOVF.S    ," "
\ MOVGEZ    ," "
\ MOVGEZ.S    ," "
\ MOVI    ," "
\ MOVI.N    ," "
\ MOVLTZ    ," "
\ MOVLTZ.S    ," "
\ MOVNEZ    ," "
\ MOVNEZ.S    ," "
\ MOVSP    ," "
\ MOVT    ," "
\ MOVT.S    ," "
\ MSUB.S    ," "
\ MUL.AA    ," "
\ MUL.AD    ," "
\ MUL.DA    ," "
\ MUL.DD    ," "
\ MUL.S    ," "
\ MUL16S    ," "
\ MUL16U    ," "
\ MULA.AA    ," "
\ MULA.AD    ," "
\ MULA.DA    ," "
\ MULA.DD    ," "
\ MULL    ," "
\ MULS.AA    ," "
\ MULS.AD    ," "
\ MULS.DA    ," "
\ MULS.DD    ," "
\ MULSH    ," "
\ MULUH    ," "
\ NEG    ," "
\ NEG.S    ," "
\ NOP    ," "
\ NOP.N    ," "
\ NSA    ," "
\ NSAU    ," "
\ OEQ.S    ," "
\ OLE.S    ," "
\ OLT.S    ," "
%0010 %0000 %0000 %0000 %0000 %0000  RRR: OR            ," Bitwise Logical Or"
%0010 %0010 %0000 %0000 %0000 %0000  RRR: ORB           ," Boolean Or"
%0011 %0010 %0000 %0000 %0000 %0000  RRR: ORBC          ," Boolean Or with Complement"
%0101 %0000 %1101 %0000 %0000 %0000  RRR: PDLTB         ," Probe Data TLB"
%0101 %0000 %0101 %0000 %0000 %0000  RRR: PITLB         ," Probe Instruction TLB"
%1101 %0010 %0000 %0000 %0000 %0000  RRR: QUOS          ," Quotient Signed"
%1100 %0010 %0000 %0000 %0000 %0000  RRR: QUOU          ," Quotient Unsigned"
%0101 %0000 %1011 %0000 %0000 %0000  RRR: RDTLB0        ," Read Data TLB Entry Virtual"
%0101 %0000 %1111 %0000 %0000 %0000  RRR: RDTLB1        ," Read Data TLB Entry Translation"
%1111 %0010 %0000 %0000 %0000 %0000  RRR: REMS          ," Remainder Signed"
%1110 %0010 %0000 %0000 %0000 %0000  RRR: REMU          ," Remainder Unsigned"
%0100 %0000 %0110 %0000 %0000 %0000  RRR: RER           ," Read External Register"
%0000 %0000 %0000 %0000 %10 %00 %0000  CALLX: RET       ," Non-Windowed Return"
%1111 %0000 %0000 %1101  RRRN: RET.N                    ," Narrow Non-Windowed Return"
%0000 %0000 %0000 %0000 %10 %01 %0000  CALLX: RETW      ," Windowed Return"
\ RETW.N    ," "
\ RFFD    ," "
\ RFDE    ," "
\ RFDO    ," "
\ RFE    ," "
\ RFI     ," "
\ RFME    ," "
\ RFR    ," "
\ RFUE    ," "
\ RFWO    ," "
\ RFWU    ," "
\ RITBLB0    ," "
\ RITBLB1    ," "
\ ROTW    ," "
\ ROUND.S    ," "
\ RSIL    ," "
\ RSR.*    ," "
\ RSR    ," "
\ RSRat    ," "
\ RSYNC    ," "
\ RUR    ," "
\ RUR.*    ," "
\ S8I    ," "
\ S16I    ," "
\ S32C1I    ," "
\ S32E    ," "
\ S32I    ," "
\ S32I.N    ," "
\ S32RI    ," "
\ SDCT    ," "
\ SEXT    ," "
\ SICT    ," "
\ SICW    ," "
\ SIMCALL    ," "
\ SLL    ," "
\ SLLI    ," "
\ SRA    ," "
\ SRAI    ," "
\ SRC    ," "
\ SRL    ," "
\ SRLI    ," "
\ SSA8B    ," "
\ SSA8L    ," "
\ SSAI    ," "
\ SSI    ," "
\ SSIU    ," "
\ SSL    ," "
\ SSR    ," "
\ SSX    ," "
\ SSXU    ," "
\ SUB    ," "
\ SUB.S    ," "
\ SUBX2    ," "
\ SUBX4    ," "
\ SYSCALL    ," "
\ TRUNC.S    ," "
\ UEQ.S    ," "
\ UFLOAT    ," "
\ ULE.S     ," Compare Single Unord or Less Than or Equal"
\ ULT.S     ," Compare Single Unordered or Less Than"
\ UMUL.AA.* ," Unsigned Multiply"
\ UN.S      ," Compare Single Unordered"
\ UTRUNC.S  ," Truncate Single to Fixed Unsigned"
\ WAITI     ," Wait for Interrupt"
\ WDTLB     ," Write Data TLB Entry"
%0100 %0000 %0111 %0000 %0000 %0000  RRR: WER           ," Write External Register"
\ WFR       ," Move AR to FR"
\ WITLB     ," Write Instruction TLB Entry"
\ WSR.*    ," "
\ WSR       ," Write Special Register"
\ WUR.*    ," "
\ WUR       ," Write User Register
%0011 %0000 %0000 %0000 %0000 %0000  RRR: XOR           ," Bitwise Logical Exclusive Or"
\ XORB      ," Boolean Exclusive Or"
\ XSR.*    ," "
\ XSR       ," Exchange Special Register"



