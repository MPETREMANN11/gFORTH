\ *********************************************************************
\    Filename:      Xassembler.txt                                    *
\    Date:          03.05.2021                                        *
\    MCU:           ESP32 -- gForth                                   *
\    Copyright:     Marc PETREMANN                                    *
\    Author:        Marc PETREMANN                                    *
\    Updated:       11.05.2021                                        *
\ *********************************************************************
\ Forth Cross assembler for ESP32 chips

\ original documentation here: https://0x04.net/~mwk/doc/xtensa.pdf

\ define Xassembler vocabulary
[ifundef] Xassembler
    vocabulary Xassembler
[then]

also Xassembler
Xassembler definitions


\ ----------- HERE PLACE FORTH ASSEMBLER CODE --------------

\G Address Registers (AR) general registers
: ARreg: ( c -- )
    constant 
    ;

00 ARreg: a0    \ holds the call return address
01 ARreg: a1    \ stack pointer
02 ARreg: a2
03 ARreg: a3
04 ARreg: a4
05 ARreg: a5
06 ARreg: a6
07 ARreg: a7
08 ARreg: a8
09 ARreg: a9
10 ARreg: a10
11 ARreg: a11
12 ARreg: a12
13 ARreg: a13
14 ARreg: a14
15 ARreg: a15


: _does24bArAt { opCode ar at -- }  \ CAUTION: locals variables @TODO: must defined
    ;

\G definie value opCode
: 24bArAt:  ( comp: c -- <name> | exec: ar at -- )
    create
        ,
    does>
        @ _does24bArAt
    ;


: _does24bArAsAt { opCode ar as at -- }  \ CAUTION: locals variables @TODO: must defined
    ;

\G definie value opCode
: 24bArAsAt:  ( comp: c -- <name> | exec: ar as at -- @TODO: must defined )
    create
        ,
    does>
        @ _does24bArAsAt
    ;


: _doesN24bArAsAt { opCode ar as at -- }  \ CAUTION: locals variables @TODO: must defined
    ;

\G definie value opCode Narrow XXX
: N24bArAsAt:  ( comp: c -- <name> | exec: ar as at -- @TODO: must defined )
    create
        ,
    does>
        @ _doesN24bArAsAt
    ;

\G define value opCode Narrow XXX
\ : N24btBs:  ( comp: c -- <name> | exec: bt bs -- @TODO: must defined )
\     create
\         ,
\     does>
\         @
\     ;



%11111010 24bArAt           ABS,        \ Absolute Value

\ ABS.S

%10000000   24bArAsAt:      ADD,        \ Add
%1010       N24bArAsAt:     ADD.N,      \ Narrow Add

\ ADD.S
\ ADDI
\ ADDI.N
\ ADDMI

%10010000   24bArAsAt:      ADDX2,      \ Add with Shift by 1
%10100000   24bArAsAt:      ADDX4,      \ Add with Shift by 2
%10110000   24bArAsAt:      ADDX8,      \ Add with Shift by 3

\ N24btBs: ALL4  \ All 4 Booleans True
\ N24btBs: ALL8  \ All 8 Booleans True

%00010000   24bArAsAt:      AND,        \ Bitwise Logical And

\ ANDB
\ ANDBC
\ ANY4
\ ANY8
\ .......







\ -----------------------------------------------------------









\ defered version of , and c,
defer ,
defer c,

forth ' ,  Xassembler is ,



\ *** clone assembly directives ***********************************

\ Defines a symbol and sets its value
\ later changes of this value remain possible, syntax:
\ 1234 .equ test
: .equ  ( comp: n -- <name> | exec: -- n)
    >in @ >r
    bl word
    count 2dup
    find-name       \ leave nfa or 0
    ?dup
    if              \ word defined
        r> drop
        name>int    \ nfa > cfa
        16 + >r     \ cfa > pfa  @TODO vÃ©rifier '16' !!!!!
        2drop r> !  \ store value
    else            \ word undefined
        drop
        r> >in !
        drop value
    then
    ;

\ Defines a synonym for a register, syntax:
\ R16 .def MyReg
: .def  ( comp: n -- <name> | exec: -- n)
    value
    ;

\ Fixes the value of a symbole
\ later redefinition is not possible, syntax:
\ 123 .set ONE_TWO_THREE
: .set ( comp: n -- <name> | exec: -- n)
    constant
    ;

\ Reserves bytes for a variable
: .byte ( comp: n -- <name> | exec: -- n)
    constant
    ;



\ Define constant 1 bytes in program memory and EEPROM.
: .db ( c --)
    dup $ff >
    if
        abort" too big"
        exit
    then
    c,
    ;

\ Define constant 2 bytes in program memory and EEPROM.
: .dw ( n --)
    dup $ffff >
    if
        abort" too big"
        exit
    then
    ,
    ;

\ keep lowest 8 bits from n
: LOW ( n -- c)
    $100 /mod drop
    ;

\ keep highest 8 bits from n
: HIGH ( n -- c)
    $100 /mod swap drop
    ;

\ *** ASSEMBLER directives definitions *********

: .macro ( exec: -- <name>)
    :
    ;

: .endmacro ( --)
    postpone ;
    ; immediate


\ *** clone ASSEMBLER operators ******************

\ LSHIFT u1 value n shifts
: << ( u1 n --)
    lshift
    ;

\ RSHIFT u1 value n shifts
: >> ( u1 n --)
    rshift
    ;

\ logical OR
: || ( fl1 fl2 --)
    or
    ;

\ logical AND
: && ( fl1 fl2 --)
    and
    ;





\ *** END directives definitions ****

\ *** for testing Xassembler ****************************
: >lower ( c1 -- c2 )
    dup 'A' 'Z' 1+ within bl and or ;

: .HH ( c --)
    base @ >r
    s>d <# # # #> type space
    r> base ! ;

: .HHHH ( n --)
    base @ >r
    s>d <# # # # # #> type space
    r> base ! ;

' .HH   is c,
' .HHHH is ,
\ defered words will be updated in file meta_xxxxx.txt, example:
\ meta ' c,-t         Xassembler IS c,
\ meta ' ,-t          Xassembler IS ,

\ *** @END of testing Xassembler ****************************


\ *** End of File ***********************
cr ." Xassembler.txt"

