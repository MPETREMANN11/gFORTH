\ *********************************************************************
\ * High level definitions of FORTH words                             *
\    Date:          05.04.2021                                        *
\    FF Version:    5.0                                               *
\    MCU:           All -- gForth metacompilation                     *
\    Copyright:     Marc PETREMANN                                    *
\    Author:        Marc PETREMANN                                    *
\    Updated:       14.05.2021                                        *
\ *********************************************************************

cr ." kernelCode.txt"

[ifundef] rot
\ rotate 3 values on top of stack
: rot ( n1 n2 n3 --- n3 n1 n2)
    >r swap r> swap
    ;
[endif]


[ifundef] +!
: +!  ( n addr --)
    swap over @
    + swap !
    ;
[endif]


\ output a space
: space  ( --)
    bl emit
    ;


\ align DP
: align ( -- )
    here aligned
    dp !
    ;

\ fetch double integer from addr
: 2@ ( addr -- d )
    dup @
    swap cell + @
    ;

\ true if integers u1 > u2
: u> ( u1 u2 -- fl )
    swap u<
    ;

[ifundef] umax
\ unsigned maximum
: umax( u1 u2 -- u)
    2dup u<
    if swap then
    drop ;
[endif]

\ true if integers n1 = n2
: = ( n1 n2 -- fl )
    -  0=
    ;

\ true if integers n1 not = n2
: <> ( n1 n2 -- fl )
    =  0=
    ;


: value ( comp: n -- <name> | exec: -- n )
    create
        ,                   \ store n in pfa
    does>
        @
    ;

\ CHAR   -- char           parse ASCII character
\         .db     NFA|4,"char",0
\ CHAR:
\         rcall   BL
\         rcall   PARSE
\         rcall   DROP
\         jmp     CFETCH

\ parse ASCII character
: char ( comp: -- )
    bl parse
    drop c@
    ; immediate



\ [CHAR]   --          compile character DOLITeral
\         .db     NFA|IMMED|COMPILE|6,"[char]",0
\ BRACCHAR:
\         rcall   CHAR
\         jmp     LITERAL

\ compile character DOLITeral
: [char] ( comp: -- <char> )
    char literal
    ; immediate compile-only


\
\ et current data space ptr
: here ( -- addr )
    dp @
    ;


[ifundef] cell+
\ Increment addr to next cell ::  tested OK 07may2021
: cell+ ( a-addr1 -- a-addr2 )
    2 +
    ;
[endif]


\ print stack contents
\ : .s ( -- )
\     space
\     sp@ s0 @ 2-
\     begin
\         2dup <
\     while
\         -@ u.
\     repeat
\     2drop
\     ;



\ drop 2 cells
: 2drop ( d -- )
    drop drop
    ;


\ dup top 2 cells
: 2dup ( d -- d d )
    over over
    ;


\ swap top 2 cells
: 2swap ( d1 d2 -- d1 d2 )
    rot >r
    rot r>
    ;


\ unsigned maximum
: umax ( u1 u2 -- u )
    2dup u<
    if
        swap
    then
    drop
    ;


\ unsigned minimum
: umin ( u1 u2 -- u)
    2dup u>
    if
        swap
    then
    drop
    ;


\ type line to terminal u < $100
\ : type ( c-addr u --) \
\     for
\         c@+ emit
\     next
\     drop
\     ;


: allot ( n --)
    dp +!
    ;


\ append cell to current data space
: , ( u -- )
    here !
    cell allot
    ;


\ append char to current data space
: c, ( c -- )
    here c!
    1 allot
    ;


[ifundef] +!
: +!  ( n addr --)
    swap over @
    + swap !
    ;
[endif]


\ store 2 cells
: 2! ( x1 x2 a-addr -- )
    swap over !
    cell+ !
    ;


\ display u unsigned
: u.   ( u -- )
    <# 0 #s #> type space
    ;


\ display u unsigned in field of n. 1<n<=255
: u.r   ( u +n -- )
    0 swap 
    <# 1- 
    for 
        # 
    next 
    #s #> 
    type space 
    ; 


\ display n signed
: .    ( n -- )                  
    <# dup abs #S swap sign #>
    type space 
    ; 


: decimal  ( -- )
    #10 base !
    ;


: hex  ( -- )
    #16 base !
    ;


: bin  ( -- )
    #2 base !
    ;


\ output a string with current data section and current base info
: .st  ( -- ) 
    base @ dup 
    decimal <#  [char] , hold #s  
    [char] < hold #> type
    <# [char] > hold cse @ #s #> type base ! 
    ;

\ .S      --           print stack contents
\ : .s space sp@ s0 @ 2- begin 2dup < while -@ u. repeat 2drop \

\         .db     NFA|2,".s",0
\ DOTS:
\         rcall   SPACE_
\         rcall   DUP  \ dup
\         call    SPFETCH
\         rcall   S0
\         rcall   FETCH_A
\         rcall   TWOMINUS
\ DOTS1:
\         rcall   TWODUP
\         rcall   LESS
\         rcall   ZEROSENSE
\         breq    DOTS2
\         rcall   MINUS_FETCH
\         rcall   UDOT
\         rjmp    DOTS1
\ DOTS2:
\         rcall   DROP
\         jmp     TWODROP



\ output newline      
: cr  ( -- )
    $0d emit
    $0a emit
    ;


: to
    is
    ; immediate



\ *** End of File ***********************



